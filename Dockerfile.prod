### Pull official base image with Debian OS
FROM python:3.11.8-slim-bookworm

# Create the app user
RUN mkdir -p /home/app
RUN addgroup --system app && adduser --system --group app

# Create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/log
WORKDIR $APP_HOME

### Create a virtual environment for code and c++ library installation
ENV VIRTUAL_ENV=$HOME/venv
RUN python -m venv ${VIRTUAL_ENV} --prompt=catch-apis-dev
ENV PATH="${VIRTUAL_ENV}/bin:$PATH"

### Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV S2PREFIX=$VIRTUAL_ENV
ENV LDFLAGS="-L/$VIRTUAL_ENV/lib -Wl,-rpath=/$VIRTUAL_ENV/lib"
ENV CXXFLAGS="-I/$VIRTUAL_ENV/include"

### Install system dependencies
RUN apt-get update && apt-get install -y \
  # Stuff for our flask app
  netcat-openbsd \
  # Stuff for S2 Geometry: https://s2geometry.io/about/platforms
  git \
  wget \
  build-essential \
  libgflags-dev \
  libgoogle-glog-dev \
  libgtest-dev \
  libssl-dev \
  swig \
  cmake \
  g++

### Install S2; see: https://s2geometry.io/about/platforms; build outside the app home
WORKDIR $HOME
COPY ./_install_s2 ./
RUN ./_install_s2

### Install python dependencies
WORKDIR $APP_HOME
COPY requirements.prod.txt ./
RUN pip install -q -U pip setuptools wheel
RUN pip install --src=/catchlibs -r requirements.prod.txt

### Install app and woRQer entrypoints
COPY _entrypoint_webapp_prod _entrypoint_woRQer_prod ./

# chown all the files to the app user
RUN chown -R app:app $APP_HOME
RUN chown -R app:app $APP_HOME/.*
USER app

# Start up command issued in docker-compose files