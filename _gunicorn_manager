#!/bin/sh

# ============================================================================
# This script is used to start/stop/restart the CATCH APIs in deployment
# environments; to identify processes launched from a particular deployment
# (PROD, STAGE or SANDBOX), we 'pgrep' on the path to the running gunicorn
# in the virtual-environment dir
# ============================================================================

# Load vars defined in .env
source .env

# Determine port
if [[ $DEPLOYMENT_TIER == 'PROD' ]]; then
  PORT=5000
elif [[ $DEPLOYMENT_TIER == 'STAGE' ]]; then
  PORT=5001
elif [[ $DEPLOYMENT_TIER == 'SANDBOX' ]]; then
  PORT=5002
elif [[ $DEPLOYMENT_TIER == 'LOCAL' ]]; then
  PORT=5003
else
  echo "DEPLOYMENT_TIER not found/recognized!"
  exit 1
fi

# Add unadvertised 2nd argument '0' to prevent daemonization; used for debugging
is_daemon=TRUE
is_daemon_flag='--daemon'
if [[ $2 == 0 ]]; then
  is_daemon=FALSE
  is_daemon_flag=''
fi

# Count how many gunicorn processes are running from this virtual environment:
if [ -z $VIRTUAL_ENV ]; then
  echo "No VENV activated!"
  exit 1
fi
GUNICORN_PROCESSES=$(($(ps -ef | grep $VIRTUAL_ENV"/bin/gunicorn" | wc -l) - 1))

d_status() {

  if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
    echo "Gunicorn is running with "$GUNICORN_PROCESSES" workers."
    echo "Parent PID: $(cat .pid.txt)"
  else
    echo "No gunicorn process is running from this project's virtual environment at the moment."
  fi
}

d_start() {

  if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
    d_status
    echo "Cancelling start!"
  else
    ### Enter src, start gunicorn, exit
    cd src
    echo "-----------------------------------------------------"
    echo "This API is not running; begin workers in production!"
    IS_DAEMON=$is_daemon gunicorn app_entry:flask_app \
      --config ..\/.gunicorn.config.py \
      --pid ..\/.pid.txt \
      --name $APP_NAME \
      --bind '127.0.0.1:'$PORT \
      $is_daemon_flag
    echo "-----------------------------------------------------"
    cd ..
  fi
}

d_stop() {
  if [ -e .pid.txt ]; then
    archive_logs
    echo "Stopping gunicorn process; this may take ~10 seconds..."
    kill -9 $(cat .pid.txt)
    sleep 10
    rm .pid.txt
    if [ -e .pid-old.txt ]; then
      rm .pid-old.txt
    fi
    #
    echo "... done!"
  else
    #TODO: improve logic here:
    echo "No file '.pid.txt' found. Will not attempt to stop. Are you sure the API is running?"
  fi
}

d_restart() {

  if [ -e $PWD/.pid.txt ] && [ $GUNICORN_PROCESSES == 0 ]; then
    rm $PWD/.pid.txt
  fi

  if [ ! -e $PWD/.pid.txt ] && [ $GUNICORN_PROCESSES -gt 0 ]; then
    echo "Something is messed up here!!!"
    exit 1
  fi

  if [ -e $PWD/.pid.txt ]; then
    archive_logs
    cp .pid.txt .pid-old.txt
    # Reexec a new master with new workers
    kill -s USR2 $(cat .pid.txt)
    sleep 1
    # Graceful stop old workers
    kill -s WINCH $(cat .pid-old.txt)
    sleep 1
    # Graceful stop old master
    kill -s QUIT $(cat .pid-old.txt)
    sleep 1
    d_status
  else
    echo "No file '.pid.txt' found! Try starting the API:"
    if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
      echo "This API is already running in production; cancelling start!"
      echo "Something is messed up here; need to send notification to web master!"
    else
      d_start
    fi
  fi
}

archive_logs() {
  if [ -e logging/production_logs.log ]; then
    printf "\n\nArchiving previous logs..."
    sleep 1
    cp logging/production_logs.log logging/old-logs/productions_logs_last.log
    mv logging/production_logs.log $(x="logging/old-logs/production_logs_"$(date)"_.log" && echo ${x//" "/"_"})
    printf " done.\n"
  fi
}

case $1 in
status)
  d_status
  ;;
start)
  d_start
  ;;
stop)
  d_stop
  ;;
restart)
  d_restart
  ;;
*)
  echo "usage: $0 {status|start|stop|restart}"
  exit 1
  ;;
esac

exit 0
