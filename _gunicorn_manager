#!/bin/sh

# ============================================================================
# This script is used to start/stop/restart the CATCH APIs in production mode
# ============================================================================

# Load vars defined in .env
$(cat .env | sed 's/^/export /')

# Determine port
if [[ $DEPLOYMENT_ENV == 'PROD' ]]; then
    PORT=5000
elif [[ $DEPLOYMENT_ENV == 'STAGE' ]]; then
    PORT=5001
elif [[ $DEPLOYMENT_ENV == 'DEV' ]]; then
    PORT=5002
else
    echo "DEPLOYMENT_ENV not found/recognized!"
    exit 1
fi

# Count how many gunicorn processes are running from this virtual environment:
GUNICORN_PROCESSES=$(ps -ef | grep $VIRTUAL_ENV"/.venv\/bin\/gunicorn" | wc -l)

d_status() {

    if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
        echo "Gunicorn is running with "$GUNICORN_PROCESSES" workers."
        echo "Parent PID: $(cat .pid.txt)"
    else
        echo "No gunicorn process is running from this project's virtual environment at the moment."
    fi
}

d_start() {

    if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
        d_status
        echo "Cancelling start!"
    else
        ### Enter src, start gunicorn, exit
        cd src
        echo "-----------------------------------------------------"
        echo "This API is not running; begin workers in production!"
        gunicorn app_entry:flask_app \
            --config ..\/.gunicorn.config.py \
            --pid ..\/.pid.txt \
            --name $APP_NAME \
            --bind '127.0.0.1:5000' \
            --daemon
        echo "-----------------------------------------------------"
        cd ..
    fi
}

d_stop() {
    if [ -e .pid.txt ]; then
        echo "Stopping gunicorn process; this may take ~10 seconds..."
        kill -9 $(cat .pid.txt)
        sleep 10
        rm .pid.txt
        if [ -e .pid-old.txt ]; then
            rm .pid-old.txt
        fi
        echo "... done!"
    else
        #TODO: improve logic here:
        echo "No file '.pid.txt' found. Will not attempt to stop. Are you sure the API is running?"
    fi
}

d_restart() {
    if [ -e $PWD/.pid.txt ]; then
        cp .pid.txt .pid-old.txt
        # Reexec a new master with new workers
        kill -s USR2 $(cat .pid.txt)
        sleep 1
        # Graceful stop old workers
        kill -s WINCH $(cat .pid-old.txt)
        sleep 1
        # Graceful stop old master
        kill -s QUIT $(cat .pid-old.txt)
        sleep 1
    else
        echo "No file '.pid.txt' found! Try starting the API:"
        if [[ $GUNICORN_PROCESSES -gt 0 ]]; then
            echo "This API is already running in production; cancelling start!"
            echo "Something is messed up here; need to send notification to web master!"
        else
            d_start
        fi
    fi
}

case $1 in
status)
    d_status
    ;;
start)
    d_start
    ;;
stop)
    d_stop
    ;;
restart)
    d_restart
    ;;
*)
    echo "usage: $0 {status|start|stop|restart}"
    exit 1
    ;;
esac

exit 0
